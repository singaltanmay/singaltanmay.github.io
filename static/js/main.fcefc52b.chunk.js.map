{"version":3,"sources":["components/NavBar.js","components/Intro.js","components/ExperienceItem.js","components/Experience.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","Component","Intro","ExperienceItem","content","role","organization","from","to","description","payload","Experience","map","item","index","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wPAyBeA,G,mLApBX,OACE,yBAAKC,UAAU,UACb,4BACE,wBAAIA,UAAU,kBACZ,uBAAGC,KAAK,KAAR,UAEF,4BACE,uBAAGA,KAAK,KAAR,eAEF,4BACE,uBAAGA,KAAK,KAAR,aAEF,4BACE,uBAAGA,KAAK,KAAR,kB,GAfSC,cCcNC,EAfD,WACZ,OACE,6BACE,6CACA,iDACA,qUCOSC,EAZQ,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACxB,OACE,6BACE,4BAAKA,EAAQC,MACb,4BAAKD,EAAQE,cACb,4BACGF,EAAQG,KADX,OACqBH,EAAQI,IAE7B,2BAAIJ,EAAQK,eCPZC,EAAU,CACd,CACEL,KAAM,6BACNC,aAAc,0CACdC,KAAM,WACNC,GAAI,WACJC,YACE,iJAEJ,CACEJ,KAAM,0BACNC,aAAc,wBACdC,KAAM,WACNC,GAAI,WACJC,YACE,oGAEJ,CACEJ,KAAM,uBACNC,aAAc,wBACdC,KAAM,YACNC,GAAI,WACJC,YACE,yJAcSE,EAVI,WACjB,OACE,6BACE,0CACCD,EAAQE,KAAI,SAACC,EAAMC,GAAP,OACX,kBAAC,EAAD,CAAgBC,IAAKD,EAAOV,QAASM,EAAQI,UCbtCE,E,uKAdX,OACE,6BACE,gCACE,kBAAC,EAAD,OAEF,6BACA,yCACA,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAXUf,aCMZgB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDanB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,GAAwB9B,OAAOC,SAASpB,MACpDkD,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMyB,GAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCnC/BE,I","file":"static/js/main.fcefc52b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <div className=\"navbar\">\n        <ul>\n          <li className=\"navitem-active\">\n            <a href=\"#\">About</a>\n          </li>\n          <li>\n            <a href=\"#\">Experience</a>\n          </li>\n          <li>\n            <a href=\"#\">Projects</a>\n          </li>\n          <li>\n            <a href=\"#\">Contact</a>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\nexport default NavBar;\n","import React from \"react\";\n\nconst Intro = () => {\n  return (\n    <div>\n      <h1>Tanmay Singal</h1>\n      <h2>Software Devloper</h2>\n      <p>\n        I am a young self-taught software developer with a passion for\n        technology. I am highly motivated, hardworking and love to work on\n        solving complex problems by leveraging the power of computation. I am a\n        collaborative team worker who is always looking for an opportunity to\n        learn something new.\n      </p>\n    </div>\n  );\n};\nexport default Intro;\n","import React from \"react\";\n\nconst ExperienceItem = ({ content }) => {\n  return (\n    <div>\n      <h4>{content.role}</h4>\n      <h4>{content.organization}</h4>\n      <h5>\n        {content.from} -- {content.to}\n      </h5>\n      <p>{content.description}</p>\n    </div>\n  );\n};\nexport default ExperienceItem;\n","import React from \"react\";\nimport ExperienceItem from \"./ExperienceItem\";\n\nconst payload = [\n  {\n    role: \"Software Engineer (Intern)\",\n    organization: \"Global Alliance for Genomics and Health\",\n    from: \"Mar 2020\",\n    to: \"Aug 2020\",\n    description:\n      \"Got selected as a Google Summer of Code applicant and worked on a tool to resolve aliases between various nomenclatures of genomic sequences.\",\n  },\n  {\n    role: \"Java Developer (Intern)\",\n    organization: \"Unthinkable Solutions\",\n    from: \"Dec 2019\",\n    to: \"Feb 2020\",\n    description:\n      \"Developed REST APIs using Java SpringBoot and Postgres as backend with accompanying Android app.\",\n  },\n  {\n    role: \"Cybersecurity Intern\",\n    organization: \"Income Tax Department\",\n    from: \"July 2019\",\n    to: \"Aug 2020\",\n    description:\n      \"Learnt about various cybersecurity protocols and techniques used to prevent cybercrime against CPC (TDS) services such as filing Income Tax Returns.\",\n  },\n];\n\nconst Experience = () => {\n  return (\n    <div>\n      <h3>Experience</h3>\n      {payload.map((item, index) => (\n        <ExperienceItem key={index} content={payload[index]} />\n      ))}\n    </div>\n  );\n};\nexport default Experience;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar.js\";\nimport Intro from \"./components/Intro.js\";\nimport Experience from \"./components/Experience.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <header>\n          <NavBar />\n        </header>\n        <br />\n        <h1>Portfolio</h1>\n        <br />\n        <Intro />\n        <Experience />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}